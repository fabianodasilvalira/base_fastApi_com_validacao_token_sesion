version: '3.8'

services:
  db:
    image: postgres:15-alpine # Using a specific version of Alpine Postgres
    container_name: fastapi_auth_postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${DB_USER:-postgres} # Use from .env or default to postgres
      POSTGRES_PASSWORD: ${DB_PASS:-your_postgres_password} # Use from .env or default
      POSTGRES_DB: ${DB_NAME:-fastapi_auth_db}     # Use from .env or default
    ports:
      - "${DB_PORT:-5432}:5432" # Expose DB port, use from .env or default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-fastapi_auth_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_auth_app_service
    depends_on:
      db: # Wait for db to be healthy
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - .:/app # Mount current directory to /app in container for development (optional)
               # For production, you might not want to mount the source code directly
      - ./logs:/app/logs # Mount logs directory
    env_file:
      - .env # Load environment variables from .env file
    environment:
      # Ensure DATABASE_URL uses the service name 'db' from docker-compose
      # This overrides the DB_HOST from .env if it was 'localhost'
      DB_HOST: db
      # Other environment variables can be set here or will be taken from .env
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

    #command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"] # --reload for dev
    # For production, remove --reload and consider more workers:
    # command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
    # Or use gunicorn:
    # command: ["gunicorn", "-k", "uvicorn.workers.UvicornWorker", "-c", "./gunicorn_conf.py", "main:app"]
    restart: unless-stopped

volumes:
  postgres_data: # Persists PostgreSQL data
